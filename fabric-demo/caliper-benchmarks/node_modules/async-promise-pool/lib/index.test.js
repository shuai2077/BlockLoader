"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PromisePool = require(".");

describe("PromisePool", function () {
  var promiseSpy = void 0;
  var promiseProducer = void 0;

  beforeEach(function () {
    promiseSpy = jest.fn();
    promiseProducer = function promiseProducer() {
      return new _promise2.default(function (resolve, reject) {
        promiseSpy();
        resolve("success");
      });
    };
  });

  it("should await all promises", (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
    var pool, results;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            pool = new PromisePool();

            pool.add(promiseProducer);
            pool.add(promiseProducer);
            _context.next = 5;
            return pool.all();

          case 5:
            results = _context.sent;

            expect(promiseSpy).toHaveBeenCalledTimes(2);
            expect(results.length).toBe(2);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  it("should await all promises with no concurrency", (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
    var pool, results;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            pool = new PromisePool({ concurrency: 1 });

            pool.add(promiseProducer);
            pool.add(promiseProducer);
            pool.add(promiseProducer);
            _context2.next = 6;
            return pool.all();

          case 6:
            results = _context2.sent;

            expect(promiseSpy).toHaveBeenCalledTimes(3);
            expect(results.length).toBe(3);

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));

  it("should allow multiple concurrency", (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3() {
    var delayedPromiseSpy, delayedPromiseProducer, pool, results;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            delayedPromiseSpy = jest.fn();

            delayedPromiseProducer = function delayedPromiseProducer() {
              return new _promise2.default(function (resolve, reject) {
                setTimeout(function () {
                  delayedPromiseSpy();
                  resolve("delayed");
                }, 1000);
              });
            };

            pool = new PromisePool({ concurrency: 2 });

            pool.add(delayedPromiseProducer);
            pool.add(promiseProducer);
            _context3.next = 7;
            return pool.all();

          case 7:
            results = _context3.sent;

            expect(delayedPromiseSpy).toBeCalled();
            expect(promiseSpy).toBeCalled();
            expect(results[0]).toBe("success");
            expect(results[1]).toBe("delayed");

          case 12:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  })));

  it("should respect concurrency", (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
    var delayedPromiseSpy, kindaDelayedPromiseProducer, delayedPromiseProducer, pool, results;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            delayedPromiseSpy = jest.fn();

            kindaDelayedPromiseProducer = function kindaDelayedPromiseProducer() {
              return new _promise2.default(function (resolve, reject) {
                setTimeout(function () {
                  delayedPromiseSpy();
                  resolve("delayed2");
                }, 500);
              });
            };

            delayedPromiseProducer = function delayedPromiseProducer() {
              return new _promise2.default(function (resolve, reject) {
                setTimeout(function () {
                  delayedPromiseSpy();
                  resolve("delayed");
                }, 1000);
              });
            };

            pool = new PromisePool({ concurrency: 2 });

            pool.add(delayedPromiseProducer);
            pool.add(kindaDelayedPromiseProducer);
            pool.add(promiseProducer);
            _context4.next = 9;
            return pool.all();

          case 9:
            results = _context4.sent;

            expect(results[0]).toBe("delayed2");
            expect(results[1]).toBe("success");
            expect(results[2]).toBe("delayed");

          case 13:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  })));

  it("can be called multiple times", (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
    var pool, results;
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            pool = new PromisePool({ concurrency: 2 });

            pool.add(promiseProducer);
            _context5.next = 4;
            return pool.all();

          case 4:
            pool.add(promiseProducer);
            pool.add(promiseProducer);
            _context5.next = 8;
            return pool.all();

          case 8:
            results = _context5.sent;

            expect(promiseSpy).toHaveBeenCalledTimes(3);
            expect(results.length).toBe(3);

          case 11:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  })));

  it("should throw if .all fails", (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {
    var pool, error, errorProducer;
    return _regenerator2.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            pool = new PromisePool({ concurrency: 2 });
            error = void 0;

            errorProducer = function errorProducer() {
              return new _promise2.default(function (resolve, reject) {
                reject(new Error("Test"));
              });
            };

            _context6.prev = 3;

            pool.add(promiseProducer);
            pool.add(promiseProducer);
            pool.add(errorProducer);
            _context6.next = 9;
            return pool.all();

          case 9:
            _context6.next = 14;
            break;

          case 11:
            _context6.prev = 11;
            _context6.t0 = _context6["catch"](3);

            error = _context6.t0.message;

          case 14:
            expect(error).toBe("Test");

          case 15:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, undefined, [[3, 11]]);
  })));

  it("should throw if any promise fails outside of .all", (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {
    var pool, error, errorProducer;
    return _regenerator2.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            pool = new PromisePool({ concurrency: 2 });
            error = void 0;

            errorProducer = function errorProducer() {
              return new _promise2.default(function (resolve, reject) {
                reject(new Error("Test"));
              });
            };

            pool.add(promiseProducer);
            pool.add(promiseProducer);
            pool.add(errorProducer);
            _context7.prev = 6;
            _context7.next = 9;
            return pool.all();

          case 9:
            _context7.next = 14;
            break;

          case 11:
            _context7.prev = 11;
            _context7.t0 = _context7["catch"](6);

            error = _context7.t0.message;

          case 14:
            expect(error).toBe("Test");

          case 15:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, undefined, [[6, 11]]);
  })));

  it("should resolve if pool is empty", (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8() {
    var pool, results;
    return _regenerator2.default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            pool = new PromisePool({ concurrency: 2 });
            _context8.next = 3;
            return pool.all();

          case 3:
            results = _context8.sent;

            expect(results.length).toBe(0);

          case 5:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8, undefined);
  })));
});